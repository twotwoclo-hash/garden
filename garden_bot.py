import logging
import os
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
import fitz
from datetime import datetime
from dateutil.relativedelta import relativedelta

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
SUM, NUMBER = range(2)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# URL –∏ —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ["BOT_TOKEN"]
WEBHOOK_URL = os.environ["WEBHOOK_URL"]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("üßæ –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=reply_markup)
    return ConversationHandler.END

async def ping(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ webhook!")

async def cert_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª:")
    return SUM

async def get_sum(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if not user_input:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–∏–Ω–∞–ª).")
        return SUM
    if not user_input.isdigit():
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è –Ω–æ–º–∏–Ω–∞–ª–∞.")
        return SUM
    context.user_data['sum'] = user_input
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:")
    return NUMBER

async def get_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.strip()
    if not user_input:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ (–Ω–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞).")
        return NUMBER
    if not user_input.isdigit():
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.")
        return NUMBER

    number = user_input
    context.user_data['number'] = number
    user_sum = context.user_data['sum']
    valid_until = (datetime.now() + relativedelta(months=3)).strftime("%d.%m.%Y")

    template_path = "03cad_pechat.pdf"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–º—è
    output_path = f"—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç_#{number}.pdf"

    try:
        doc = fitz.open(template_path)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        return ConversationHandler.END

    if doc.page_count < 2:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –≤ —à–∞–±–ª–æ–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        doc.close()
        return ConversationHandler.END

    page = doc[1]
    page.insert_text((165, 245), user_sum, fontsize=20, fontname="helv", color=(1, 1, 1))
    page.insert_text((180, 285), valid_until, fontsize=20, fontname="helv", color=(1, 1, 1))
    page.insert_text((20, 420), f"#{number}", fontsize=10, fontname="helv", color=(1, 1, 1))

    try:
        doc.save(output_path, incremental=False)
        doc.close()
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ PDF: {e}")
        return ConversationHandler.END

    try:
        with open(output_path, "rb") as f:
            await update.message.reply_document(f, filename=os.path.basename(output_path))
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ PDF: {e}")

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ webhook
async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^üßæ –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç$"), cert_entry),
            CommandHandler("cert", cert_entry),
        ],
        states={
            SUM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_sum)],
            NUMBER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_number)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ping", ping))
    app.add_handler(conv_handler)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
    await app.bot.set_webhook(url=WEBHOOK_URL)

    # –ó–∞–ø—É—Å–∫ webhook-—Å–µ—Ä–≤–µ—Ä–∞
    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        webhook_url=WEBHOOK_URL
    )

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

